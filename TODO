Lending logic:
  g when a token has < 18 decimal places, and a user withdraws their full EToken balance, 0 out the remaining dust so user gets a storage refund
  ? log Transfer event when DToken accrues interest (necessary to accurately track debt balance, but adds gas to many operations)
  * tests
    ! more sub-account tests
      * borrow/repay
      * sub-account ids too large
    * token with collateral factor=0 doesn't contribute to your collateral
    * eWETH

Exec
  ? in batch dispatch, returning values probably doesn't make sense. use logs instead
  ? method to do a uniswap swap so rebalancing can be done in a batch (EToken -> EToken, from perspective of user)
  ? figure out how/if flash loans will work with batch dispatch
  * tests
    !! logs sent through proxy ok
    ! reentrancy guard
    * test that internal modules cannot be called through dispatcher or batch dispatch
    * failure cases in batch

RiskManager:
  ! tests for cases where borrow isolation is turned back on, and when collateral factor set back to 0
  ? emit log when we increase uniswap observation cardinality?
  ? how to determine which uniswap pool (fee-level) to use when market activated? check liquidity?
  * tests
    ! misbehaving tokens
      ! failing balanceOf (bad return, out of gas, self destruct)
      ! if balanceOf(euler) suddenly goes to 0, balanceOfUnderlying()s of all EToken holders go to 0 too

Liquidation
  ! basic liquidation bot
  ! require that violator is entered into collateral market
  * tests:
    * partial repayments
    * exercise when all collateral is taken -- failure possible due to rounding during conversion?
    * discount levels, profitability as price moves
    * when repay is limited to current owed, or by borrower's collateral

Interest rate models
  ! implement Michael's algo
  ! worst case caps for interest rates (in case of buggy models)
  ? PID controller
  * tests
    * negative IR

Tokens
  * emit Approval events on transfers inside E/DTokens if allowance updated
  * implement permit() on E/DTokens
  * tests
    * approval event and event parameters
    * permit with valid and invalid signatures

Invariants to add to InvariantChecker.sol contract
  * If a user has a non-zero borrow owed:
    * they must be entered into market
    * must have a non-zero interest accumulator
  * If totalBorrows > 0, must have a non-zero interest accumulator

Pre-release checklist
  * FIXMEs
    * comment out "dev only"s
  * Make sure nothing is done in module constructors except set immutable variables, and modules have no storage variables
  * All methods that take 2 addresses (liquidations/transfers/approvals) should verify they aren't == or sub-accounts
  * Verify every external/public, non-view/pure function in a module is marked nonReentrant
    * Some functions don't need reentrancy guard, ie: approve(), tag them reentrantOK
  * No accidental external methods inherited (nothing external/public in the Base classes, except moduleId)
  * Storage layout consistent between releases
  * Make sure "msg.sender" not present in contracts/modules/
  * Any path to increase/decrease/transfer an account's balance/borrow should do an updateAverageLiquidity() first
