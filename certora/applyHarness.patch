diff -ruN BaseLogic.sol BaseLogic.sol
--- BaseLogic.sol	2021-09-14 11:02:38.937718289 -0400
+++ BaseLogic.sol	2021-09-20 16:24:26.209418161 -0400
@@ -153,6 +153,7 @@
         uint maxExternalAmount;
     }
 
+    
     function initAssetCache(address underlying, AssetStorage storage assetStorage, AssetCache memory assetCache) internal view returns (bool dirty) {
         dirty = false;
 
@@ -161,7 +162,7 @@
         // Storage loads
 
         assetCache.lastInterestAccumulatorUpdate = assetStorage.lastInterestAccumulatorUpdate;
-        uint8 underlyingDecimals = assetCache.underlyingDecimals = assetStorage.underlyingDecimals;
+        assetCache.underlyingDecimals = assetStorage.underlyingDecimals;
         assetCache.interestRateModel = assetStorage.interestRateModel;
         assetCache.interestRate = assetStorage.interestRate;
         assetCache.reserveFee = assetStorage.reserveFee;
@@ -177,8 +178,19 @@
 
         // Derived state
 
+        computeDerivedState(assetCache);
+
+        // Update interest accumulator and reserves
+
+        if (block.timestamp != assetCache.lastInterestAccumulatorUpdate) {
+            dirty = true;
+            accrueInterest(assetCache);
+        }
+    }
+
+    function computeDerivedState(AssetCache memory assetCache) virtual view internal {
         unchecked {
-            assetCache.underlyingDecimalsScaler = 10**(18 - underlyingDecimals);
+            assetCache.underlyingDecimalsScaler = 10**(18 - assetCache.underlyingDecimals);
             assetCache.maxExternalAmount = MAX_SANE_AMOUNT / assetCache.underlyingDecimalsScaler;
         }
 
@@ -188,43 +200,41 @@
         } else {
             assetCache.poolSize = 0;
         }
+    }
 
-        // Update interest accumulator and reserves
+    function accrueInterest(AssetCache memory assetCache) virtual view internal { 
 
-        if (block.timestamp != assetCache.lastInterestAccumulatorUpdate) {
-            dirty = true;
-
-            uint deltaT = block.timestamp - assetCache.lastInterestAccumulatorUpdate;
 
-            // Compute new values
+        uint deltaT = block.timestamp - assetCache.lastInterestAccumulatorUpdate;
 
-            uint newInterestAccumulator = (RPow.rpow(uint(int(assetCache.interestRate) + 1e27), deltaT, 1e27) * assetCache.interestAccumulator) / 1e27;
+        // Compute new values
 
-            uint newTotalBorrows = assetCache.totalBorrows * newInterestAccumulator / assetCache.interestAccumulator;
+        uint newInterestAccumulator = (RPow.rpow(uint(int(assetCache.interestRate) + 1e27), deltaT, 1e27) * assetCache.interestAccumulator) / 1e27;
 
-            uint newReserveBalance = assetCache.reserveBalance;
-            uint newTotalBalances = assetCache.totalBalances;
+        uint newTotalBorrows = assetCache.totalBorrows * newInterestAccumulator / assetCache.interestAccumulator;
 
-            uint feeAmount = (newTotalBorrows - assetCache.totalBorrows)
-                               * (assetCache.reserveFee == type(uint32).max ? DEFAULT_RESERVE_FEE : assetCache.reserveFee)
-                               / (RESERVE_FEE_SCALE * INTERNAL_DEBT_PRECISION);
+        uint newReserveBalance = assetCache.reserveBalance;
+        uint newTotalBalances = assetCache.totalBalances;
 
-            if (feeAmount != 0) {
-                uint poolAssets = assetCache.poolSize + (newTotalBorrows / INTERNAL_DEBT_PRECISION);
-                newTotalBalances = poolAssets * newTotalBalances / (poolAssets - feeAmount);
-                newReserveBalance += newTotalBalances - assetCache.totalBalances;
-            }
+        uint feeAmount = (newTotalBorrows - assetCache.totalBorrows)
+                            * (assetCache.reserveFee == type(uint32).max ? DEFAULT_RESERVE_FEE : assetCache.reserveFee)
+                            / (RESERVE_FEE_SCALE * INTERNAL_DEBT_PRECISION);
 
-            // Store new values in assetCache
+        if (feeAmount != 0) {
+            uint poolAssets = assetCache.poolSize + (newTotalBorrows / INTERNAL_DEBT_PRECISION);
+            newTotalBalances = poolAssets * newTotalBalances / (poolAssets - feeAmount);
+            newReserveBalance += newTotalBalances - assetCache.totalBalances;
+        }
 
-            assetCache.totalBorrows = encodeDebtAmount(newTotalBorrows);
-            assetCache.interestAccumulator = newInterestAccumulator;
-            assetCache.lastInterestAccumulatorUpdate = uint40(block.timestamp);
+        // Store new values in assetCache
 
-            if (newTotalBalances != assetCache.totalBalances) {
-                assetCache.reserveBalance = encodeSmallAmount(newReserveBalance);
-                assetCache.totalBalances = encodeAmount(newTotalBalances);
-            }
+        assetCache.totalBorrows = encodeDebtAmount(newTotalBorrows);
+        assetCache.interestAccumulator = newInterestAccumulator;
+        assetCache.lastInterestAccumulatorUpdate = uint40(block.timestamp);
+
+        if (newTotalBalances != assetCache.totalBalances) {
+            assetCache.reserveBalance = encodeSmallAmount(newReserveBalance);
+            assetCache.totalBalances = encodeAmount(newTotalBalances);
         }
     }
 
@@ -239,6 +249,7 @@
             assetStorage.totalBorrows = assetCache.totalBorrows;
 
             assetStorage.interestAccumulator = assetCache.interestAccumulator;
+
         }
     }
 
@@ -247,10 +258,9 @@
     }
 
 
-
     // Utils
 
-    function decodeExternalAmount(AssetCache memory assetCache, uint externalAmount) internal pure returns (uint scaledAmount) {
+    function decodeExternalAmount(AssetCache memory assetCache, uint externalAmount) internal view returns (uint scaledAmount) {
         require(externalAmount <= assetCache.maxExternalAmount, "e/amount-too-large");
         unchecked { scaledAmount = externalAmount * assetCache.underlyingDecimalsScaler; }
     }
@@ -270,17 +280,21 @@
         return uint144(amount);
     }
 
-    function computeExchangeRate(AssetCache memory assetCache) private pure returns (uint) {
+    function _computeExchangeRate(uint poolSize, uint totalBorrows, uint totalBalances) private pure returns (uint) {
+        return (poolSize + (totalBorrows / INTERNAL_DEBT_PRECISION)) * 1e18 / totalBalances;
+    }
+
+    function computeExchangeRate(AssetCache memory assetCache) private view returns (uint) {
         if (assetCache.totalBalances == 0) return 1e18;
-        return (assetCache.poolSize + (assetCache.totalBorrows / INTERNAL_DEBT_PRECISION)) * 1e18 / assetCache.totalBalances;
+        return _computeExchangeRate(assetCache.poolSize, assetCache.totalBorrows, assetCache.totalBalances);
     }
 
-    function balanceFromUnderlyingAmount(AssetCache memory assetCache, uint amount) internal pure returns (uint) {
+    function balanceFromUnderlyingAmount(AssetCache memory assetCache, uint amount) internal view returns (uint) {
         uint exchangeRate = computeExchangeRate(assetCache);
         return amount * 1e18 / exchangeRate;
     }
 
-    function balanceToUnderlyingAmount(AssetCache memory assetCache, uint amount) internal pure returns (uint) {
+    function balanceToUnderlyingAmount(AssetCache memory assetCache, uint amount) internal view returns (uint) {
         uint exchangeRate = computeExchangeRate(assetCache);
         return amount * exchangeRate / 1e18;
     }
@@ -304,6 +318,11 @@
         return abi.decode(data, (uint256));
     }
 
+    function computeUtilisation(uint totalBorrows, uint poolAssets) private pure returns (uint32) {
+        return uint32(totalBorrows * (uint(type(uint32).max) * 1e18) / poolAssets / 1e18);
+    }
+
+    int96 _newInterestRate;
     function updateInterestRate(AssetStorage storage assetStorage, AssetCache memory assetCache) internal {
         uint32 utilisation;
 
@@ -311,19 +330,19 @@
             uint totalBorrows = assetCache.totalBorrows / INTERNAL_DEBT_PRECISION;
             uint poolAssets = assetCache.poolSize + totalBorrows;
             if (poolAssets == 0) utilisation = 0; // empty pool arbitrarily given utilisation of 0
-            else utilisation = uint32(totalBorrows * (uint(type(uint32).max) * 1e18) / poolAssets / 1e18);
+            else utilisation = computeUtilisation(totalBorrows, poolAssets);
         }
 
-        bytes memory result = callInternalModule(assetCache.interestRateModel,
-                                                 abi.encodeWithSelector(BaseIRM.computeInterestRate.selector, assetCache.underlying, utilisation));
+        //bytes memory result = callInternalModule(assetCache.interestRateModel,
+        //                                         abi.encodeWithSelector(BaseIRM.computeInterestRate.selector, assetCache.underlying, utilisation));
 
-        (int96 newInterestRate) = abi.decode(result, (int96));
+        (int96 newInterestRate) = _newInterestRate; //abi.decode(result, (int96));
 
         assetStorage.interestRate = assetCache.interestRate = newInterestRate;
     }
 
     function logAssetStatus(AssetCache memory a) internal {
-        emit AssetStatus(a.underlying, a.totalBalances, a.totalBorrows / INTERNAL_DEBT_PRECISION, a.reserveBalance, a.poolSize, a.interestAccumulator, a.interestRate, block.timestamp);
+        //emit AssetStatus(a.underlying, a.totalBalances, a.totalBorrows / INTERNAL_DEBT_PRECISION, a.reserveBalance, a.poolSize, a.interestAccumulator, a.interestRate, block.timestamp);
     }
 
 
@@ -387,7 +406,7 @@
     // unchecked is OK here since owed is always loaded from storage, so we know it fits into a uint144 (pre-interest accural)
     // Takes and returns 27 decimals precision.
 
-    function roundUpOwed(AssetCache memory assetCache, uint owed) private pure returns (uint) {
+    function roundUpOwed(AssetCache memory assetCache, uint owed) private view returns (uint) {
         if (owed == 0) return 0;
 
         unchecked {
@@ -541,9 +560,11 @@
         return abi.decode(result, (uint));
     }
 
+    IRiskManager.LiquidityStatus _status;
+
     function getAccountLiquidity(address account) internal returns (uint collateralValue, uint liabilityValue) {
-        bytes memory result = callInternalModule(MODULEID__RISK_MANAGER, abi.encodeWithSelector(IRiskManager.computeLiquidity.selector, account));
-        (IRiskManager.LiquidityStatus memory status) = abi.decode(result, (IRiskManager.LiquidityStatus));
+        //bytes memory result = callInternalModule(MODULEID__RISK_MANAGER, abi.encodeWithSelector(IRiskManager.computeLiquidity.selector, account));
+        (IRiskManager.LiquidityStatus memory status) = _status; //abi.decode(result, (IRiskManager.LiquidityStatus));
 
         collateralValue = status.collateralValue;
         liabilityValue = status.liabilityValue;
diff -ruN BaseModule.sol BaseModule.sol
--- BaseModule.sol	2021-09-07 11:38:22.724302735 -0400
+++ BaseModule.sol	2021-09-20 16:24:26.209418161 -0400
@@ -42,24 +42,10 @@
     // Emit logs via proxies
 
     function emitViaProxy_Transfer(address proxyAddr, address from, address to, uint value) internal virtual {
-        (bool success,) = proxyAddr.call(abi.encodePacked(
-                               uint8(3),
-                               keccak256(bytes('Transfer(address,address,uint256)')),
-                               bytes32(uint(uint160(from))),
-                               bytes32(uint(uint160(to))),
-                               value
-                          ));
-        require(success, "e/log-proxy-fail");
+     
     }
 
     function emitViaProxy_Approval(address proxyAddr, address owner, address spender, uint value) internal virtual {
-        (bool success,) = proxyAddr.call(abi.encodePacked(
-                               uint8(3),
-                               keccak256(bytes('Approval(address,address,uint256)')),
-                               bytes32(uint(uint160(owner))),
-                               bytes32(uint(uint160(spender))),
-                               value
-                          ));
-        require(success, "e/log-proxy-fail");
+       
     }
 }
diff -ruN .gitignore .gitignore
--- .gitignore	1969-12-31 19:00:00.000000000 -0500
+++ .gitignore	2021-09-20 16:24:26.213418520 -0400
@@ -0,0 +1,2 @@
+*
+!.gitignore
diff -ruN modules/EToken.sol modules/EToken.sol
--- modules/EToken.sol	2021-09-14 11:02:38.937718289 -0400
+++ modules/EToken.sol	2021-09-20 16:24:26.213418520 -0400
@@ -2,11 +2,11 @@
 
 pragma solidity ^0.8.0;
 
-import "../BaseLogic.sol";
+import "../../harness/Harness.sol";
 
 
 /// @notice Tokenised representation of assets
-contract EToken is BaseLogic {
+contract EToken is BaseHarness {
     constructor() BaseLogic(MODULEID__ETOKEN) {}
 
     function CALLER() virtual internal view returns (address underlying, AssetStorage storage assetStorage, address proxyAddr, address msgSender) {
@@ -94,7 +94,6 @@
         return balanceToUnderlyingAmount(assetCache, assetCache.reserveBalance) / assetCache.underlyingDecimalsScaler;
     }
 
-
     /// @notice Transfer underlying tokens from sender to the Euler pool, and increase account's eTokens
     /// @param subAccountId 0 for primary, 1-255 for a sub-account
     /// @param amount In underlying units (use max uint256 for full underlying token balance)
@@ -103,7 +102,7 @@
         address account = getSubAccount(msgSender, subAccountId);
 
         updateAverageLiquidity(account);
-        emit RequestDeposit(account, amount);
+        //emit RequestDeposit(account, amount);
 
         AssetCache memory assetCache = loadAssetCache(underlying, assetStorage);
 
@@ -140,7 +139,7 @@
         address account = getSubAccount(msgSender, subAccountId);
 
         updateAverageLiquidity(account);
-        emit RequestWithdraw(account, amount);
+        //emit RequestWithdraw(account, amount);
 
         AssetCache memory assetCache = loadAssetCache(underlying, assetStorage);
 
@@ -173,7 +172,7 @@
         address account = getSubAccount(msgSender, subAccountId);
 
         updateAverageLiquidity(account);
-        emit RequestMint(account, amount);
+        //emit RequestMint(account, amount);
 
         AssetCache memory assetCache = loadAssetCache(underlying, assetStorage);
 
@@ -199,7 +198,7 @@
         address account = getSubAccount(msgSender, subAccountId);
 
         updateAverageLiquidity(account);
-        emit RequestBurn(account, amount);
+        //emit RequestBurn(account, amount);
 
         AssetCache memory assetCache = loadAssetCache(underlying, assetStorage);
 
@@ -281,7 +280,7 @@
 
         updateAverageLiquidity(from);
         updateAverageLiquidity(to);
-        emit RequestTransferEToken(from, to, amount);
+        //emit RequestTransferEToken(from, to, amount);
 
         if (amount == type(uint).max) amount = assetStorage.users[from].balance;
 
diff -ruN Storage.sol Storage.sol
--- Storage.sol	2021-09-07 11:35:53.363906379 -0400
+++ Storage.sol	2021-09-20 16:38:06.891977560 -0400
@@ -86,9 +86,9 @@
         mapping(address => mapping(address => uint)) dTokenAllowance;
     }
 
-    mapping(address => AssetConfig) internal underlyingLookup; // underlying => AssetConfig
-    mapping(address => AssetStorage) internal eTokenLookup; // EToken => AssetStorage
-    mapping(address => address) internal dTokenLookup; // DToken => EToken
-    mapping(address => address) internal pTokenLookup; // PToken => underlying
-    mapping(address => address) internal reversePTokenLookup; // underlying => PToken
+    mapping(address => AssetConfig)  public underlyingLookup; // underlying => AssetConfig
+    mapping(address => AssetStorage) public eTokenLookup; // EToken => AssetStorage
+    mapping(address => address) public dTokenLookup; // DToken => EToken
+    mapping(address => address) public pTokenLookup; // PToken => underlying
+    mapping(address => address) public reversePTokenLookup; // underlying => PToken
 }
